type List;

def List_size: (l:List) -> Int = uninterpreted;
def List_length: (l:List) -> Int = \list -> native "len(list)";
def List_new : {x:List | List_size x == 0} = native "[]" ;
def List_append (l:List) (i: Int) : {l2:List | List_size l2 == List_size l + 1} { native "l + [i]" }


def sum: (l:List) -> Int = \xs -> native "sum(xs)";
def Math_max : (i:Int) -> (j:Int) -> Int = \i -> \j -> native "max(i,j)" ;
def Math_floor_division : (i:Int) -> (j:Int)-> Int = \i -> \j -> native "i // j" ;

def List_map_Int_Int: (function:(a: Int) -> Int) -> (l: List) -> List = \f -> \xs -> native "map(f, xs)";

def fuel_cost  (xs: List) : Int {
    mapper : (x: Int) -> Int = \x -> Math_max (Math_floor_division x 3 - 2) 0;
    sum (List_map_Int_Int mapper xs)
}

def main (args:Int) : Unit {
    l = (List_append (List_append List_new 1) 9);
    print (fuel_cost l)
}
